class ChatApp {
    constructor() {
        this.initializeElements();
        this.setupEventListeners();
        this.initializeApp();
        this.audioEnabled = true;
        this.currentAudio = null;
        this.isRecording = false;
        this.recognition = null;
        this.mediaRecorder = null;
        this.audioChunks = [];
        this.setupSpeechRecognition();
    }

    initializeElements() {
        // –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        this.chatWindow = document.getElementById('chat-window');
        this.messageForm = document.getElementById('message-form');
        this.messageInput = document.getElementById('message-input');
        this.sendBtn = document.getElementById('send-btn');
        this.typingIndicator = document.getElementById('typing-indicator');
        this.botStatus = document.getElementById('bot-status');
        this.notification = document.getElementById('notification');
        this.charCounter = document.getElementById('char-counter');
        
        // –ö–Ω–æ–ø–∫–∏
        this.voiceBtn = document.getElementById('voice-btn');
        this.audioToggle = document.getElementById('audio-toggle');
        this.themeToggle = document.getElementById('theme-toggle');
        
        // –í—Ä–µ–º—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        this.welcomeTime = document.getElementById('welcome-time');
    }

    initializeApp() {
        this.setWelcomeTime();
        this.loadTheme();
        this.setupQuickQuestions();
        this.checkHealth();
    }

    setupSpeechRecognition() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Web Speech API
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        
        if (SpeechRecognition) {
            this.recognition = new SpeechRecognition();
            this.recognition.continuous = false;
            this.recognition.interimResults = true;
            this.recognition.lang = 'ru-RU';
            
            this.recognition.onstart = () => {
                this.isRecording = true;
                this.updateVoiceButton(true);
                this.showNotification('–°–ª—É—à–∞—é... –ì–æ–≤–æ—Ä–∏—Ç–µ —Å–µ–π—á–∞—Å', 'info');
            };
            
            this.recognition.onresult = (event) => {
                const transcript = Array.from(event.results)
                    .map(result => result[0].transcript)
                    .join('');
                
                this.messageInput.value = transcript;
                this.handleInput();
            };
            
            this.recognition.onerror = (event) => {
                console.error('Speech recognition error:', event.error);
                if (event.error !== 'no-speech') {
                    this.showNotification(`–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: ${event.error}`, 'error');
                }
            };
            
            this.recognition.onend = () => {
                this.isRecording = false;
                this.updateVoiceButton(false);
                
                // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
                if (this.messageInput.value.trim()) {
                    setTimeout(() => {
                        this.showNotification('–¢–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏', 'info');
                    }, 500);
                }
            };
        } else {
            this.voiceBtn.style.display = 'none';
            this.showNotification('–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º', 'warning');
        }
    }

    setWelcomeTime() {
        const now = new Date();
        const timeString = now.toLocaleTimeString('ru-RU', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
        this.welcomeTime.textContent = timeString;
    }

    loadTheme() {
        const savedTheme = localStorage.getItem('theme') || 'light';
        document.documentElement.setAttribute('data-theme', savedTheme);
        this.updateThemeIcon(savedTheme);
    }

    updateThemeIcon(theme) {
        const icon = this.themeToggle.querySelector('.theme-icon');
        icon.textContent = theme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
    }

    setupEventListeners() {
        // –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        this.messageForm.addEventListener('submit', (e) => this.handleSubmit(e));
        
        // –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
        this.messageInput.addEventListener('input', () => this.handleInput());
        this.messageInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                if (!this.sendBtn.disabled) {
                    this.handleSubmit(e);
                }
            }
        });
        
        // –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥
        this.voiceBtn.addEventListener('click', () => this.handleVoiceInput());
        
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
        this.themeToggle.addEventListener('click', () => this.toggleTheme());
        
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–∑–≤—É—á–∫–∏
        this.audioToggle.addEventListener('click', () => this.toggleAudio());
        
        // –ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('quick-question-btn')) {
                this.handleQuickQuestion(e.target);
            }
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        this.notification.addEventListener('click', () => this.hideNotification());
    }

    setupQuickQuestions() {
        const buttons = document.querySelectorAll('.quick-question-btn');
        buttons.forEach(btn => {
            btn.addEventListener('click', () => {
                const question = btn.getAttribute('data-question');
                this.sendMessage(question);
            });
        });
    }

    handleSubmit(e) {
        e.preventDefault();
        const message = this.messageInput.value.trim();
        if (message) {
            this.sendMessage(message);
        }
    }

    handleInput() {
        const text = this.messageInput.value;
        const length = text.length;
        
        // –°—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤
        this.charCounter.textContent = `${length}/500`;
        
        // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        this.sendBtn.disabled = length === 0 || length > 500;
        
        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
        if (length > 450) {
            this.charCounter.style.color = 'var(--warning-color)';
        } else if (length > 500) {
            this.charCounter.style.color = 'var(--error-color)';
        } else {
            this.charCounter.style.color = 'var(--text-tertiary)';
        }
        
        // –ê–≤—Ç–æ-–≤—ã—Å–æ—Ç–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
        this.messageInput.style.height = 'auto';
        this.messageInput.style.height = Math.min(this.messageInput.scrollHeight, 120) + 'px';
    }

    handleVoiceInput() {
        if (!this.recognition) {
            this.showNotification('–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º', 'error');
            return;
        }

        if (this.isRecording) {
            this.recognition.stop();
        } else {
            this.messageInput.value = '';
            this.handleInput();
            this.recognition.start();
        }
    }

    updateVoiceButton(recording) {
        const icon = this.voiceBtn.querySelector('svg');
        if (recording) {
            icon.style.color = 'var(--error-color)';
            this.voiceBtn.classList.add('recording');
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—É–ª—å—Å–∞—Ü–∏–∏
            this.voiceBtn.style.animation = 'pulse 1s infinite';
        } else {
            icon.style.color = '';
            this.voiceBtn.classList.remove('recording');
            this.voiceBtn.style.animation = '';
        }
    }

    toggleTheme() {
        const currentTheme = document.documentElement.getAttribute('data-theme');
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        
        document.documentElement.setAttribute('data-theme', newTheme);
        localStorage.setItem('theme', newTheme);
        this.updateThemeIcon(newTheme);
    }

    toggleAudio() {
        this.audioEnabled = !this.audioEnabled;
        const icon = this.audioToggle.querySelector('svg');
        
        if (this.audioEnabled) {
            icon.style.color = 'var(--success-color)';
            this.showNotification('–û–∑–≤—É—á–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞', 'success');
        } else {
            icon.style.color = 'var(--text-tertiary)';
            this.showNotification('–û–∑–≤—É—á–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞', 'info');
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∞—É–¥–∏–æ
            if (this.currentAudio) {
                this.currentAudio.pause();
                this.currentAudio = null;
            }
        }
    }

    handleQuickQuestion(button) {
        const question = button.getAttribute('data-question');
        this.sendMessage(question);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è
        button.style.transform = 'scale(0.95)';
        setTimeout(() => {
            button.style.transform = '';
        }, 150);
    }

    async sendMessage(message) {
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        this.messageInput.value = '';
        this.handleInput();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.displayMessage(message, 'user');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
        this.showTypingIndicator();
        
        try {
            const response = await fetch('/api/chat/text', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ query: message })
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
            }

            // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
            this.hideTypingIndicator();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
            this.displayMessage(data.textResponse, 'bot');
            
            // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            if (this.audioEnabled && data.audioUrl) {
                this.playAudio(data.audioUrl);
            }

        } catch (error) {
            this.hideTypingIndicator();
            this.displayMessage('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'bot');
            this.showNotification(error.message, 'error');
            console.error('–û—à–∏–±–∫–∞:', error);
        }
    }

    displayMessage(text, sender) {
        const messageElement = document.createElement('div');
        messageElement.className = `message ${sender}-message`;
        
        const time = new Date().toLocaleTimeString('ru-RU', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });

        messageElement.innerHTML = `
            <div class="message-avatar">
                ${sender === 'user' ? 'üë§' : 'ü§ñ'}
            </div>
            <div class="message-content">
                <div class="message-text">${this.escapeHtml(text)}</div>
                <div class="message-time">${time}</div>
            </div>
        `;

        this.chatWindow.appendChild(messageElement);
        this.scrollToBottom();
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        messageElement.style.animation = 'messageSlide 0.3s ease-out';
    }

    showTypingIndicator() {
        this.typingIndicator.classList.add('show');
        this.scrollToBottom();
    }

    hideTypingIndicator() {
        this.typingIndicator.classList.remove('show');
    }

    async playAudio(audioUrl) {
        try {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∞—É–¥–∏–æ
            if (this.currentAudio) {
                this.currentAudio.pause();
                this.currentAudio = null;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –æ–±—Ö–æ–¥–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
            const urlWithTimestamp = `${audioUrl}?t=${Date.now()}`;
            this.currentAudio = new Audio(urlWithTimestamp);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏
            this.showNotification('–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∞—É–¥–∏–æ–æ—Ç–≤–µ—Ç...', 'info');
            
            await this.currentAudio.play();
            
            this.currentAudio.onended = () => {
                this.showNotification('–ê—É–¥–∏–æ–æ—Ç–≤–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω', 'success');
                this.currentAudio = null;
            };
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ', 'error');
        }
    }

    scrollToBottom() {
        setTimeout(() => {
            this.chatWindow.scrollTo({
                top: this.chatWindow.scrollHeight,
                behavior: 'smooth'
            });
        }, 100);
    }

    showNotification(message, type = 'info') {
        this.notification.textContent = message;
        this.notification.className = `notification show ${type}`;
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è info –∏ success
        if (type === 'info' || type === 'success') {
            setTimeout(() => {
                this.hideNotification();
            }, 3000);
        }
    }

    hideNotification() {
        this.notification.classList.remove('show');
    }

    async checkHealth() {
        try {
            const response = await fetch('/api/health');
            if (!response.ok) {
                throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }
            this.botStatus.textContent = '–û–Ω–ª–∞–π–Ω ‚Ä¢ –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å';
            this.botStatus.style.color = 'var(--success-color)';
        } catch (error) {
            this.botStatus.textContent = '–û—Ñ–ª–∞–π–Ω ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º';
            this.botStatus.style.color = 'var(--error-color)';
        }
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫–æ–≥–¥–∞ DOM –∑–∞–≥—Ä—É–∂–µ–Ω
document.addEventListener('DOMContentLoaded', () => {
    window.chatApp = new ChatApp();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', (e) => {
    console.error('Global error:', e.error);
});
